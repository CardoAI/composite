name: "build tag and push image"
description: "This action build tag and push image"
inputs:
  TAG: 
    required: true
    description: "last_successful_commi_tag"
  SHA:
    required: true
    description: "current tag"
  service:
    description: "service to build"
    required: true
outputs:

  image:
    description: "output of build image without cache"
    value: ${{ steps.build-image.outputs.image }}
  image_cache:
    description: "output of build image with cache"
    value: ${{ steps.build-image-cache.outputs.image-cache }}
runs:
  using: composite
  steps:

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      shell: bash
      env:
       TAG: ${{inputs.TAG}}
       SHA: ${{inputs.SHA}}
      if: ${{ env.TAG == env.SHA }}
      run: |
        docker build -f ./config/web/Dockerfile .  -t $ECR_REGISTRY/${{ inputs.service }}:${GITHUB_REF#refs/heads/}-${GITHUB_SHA::7} --cache-from $ECR_REGISTRY/${{ inputs.service }}:${GITHUB_REF#refs/heads/}-${{steps.successful_build.outputs.tag}}
        docker push $ECR_REGISTRY/${{ inputs.service }}:${GITHUB_REF#refs/heads/}-${GITHUB_SHA::7}
        echo "::set-output name=image::$ECR_REGISTRY/${{ inputs.service }}:${GITHUB_REF#refs/heads/}-${GITHUB_SHA::7}"
    - name: Build, tag, and push image to Amazon ECR
      id: build-image-cache
      shell: bash
      env:
        TAG: ${{inputs.TAG}}
        SHA: ${{inputs.SHA}}
      if: ${{ env.TAG != env.SHA }}
      run: |
        docker pull $ECR_REGISTRY/${{ inputs.service }}:${GITHUB_REF#refs/heads/}-${{env.TAG}}
        docker build -f ./config/web/Dockerfile .  -t $ECR_REGISTRY/${{ inputs.service }}:${GITHUB_REF#refs/heads/}-${GITHUB_SHA::7} --cache-from $ECR_REGISTRY/${{ inputs.service }}:${GITHUB_REF#refs/heads/}-${{env.TAG}}
        docker push $ECR_REGISTRY/${{ inputs.service }}:${GITHUB_REF#refs/heads/}-${GITHUB_SHA::7}
        echo "::set-output name=image-cache::$ECR_REGISTRY/${{ inputs.service }}:${GITHUB_REF#refs/heads/}-${GITHUB_SHA::7}"
