name: "Build docker image for given platform"
description: "Build a docker image for a given platform and push it to ECR"
inputs:
  sha:
    description: The commit SHA that triggered the workflow.
    required: true
  folder:
    description: The folder containing the Dockerfile.
    required: true
  context:
    description: The Docker build context.
    default: "."
  repositories:
    description: The AWS ECR repositories to push the image to (JSON string list).
    required: true
  scan:
    description: Whether to scan the image for vulnerabilities.
    default: "false"
  platform:
    description: The platform to build the image for.
    required: true
  tag:
    description: The Docker image tag.
    required: true
  extra-args:
    description: The extra arguments to pass to the Docker build command.
    default: ""
  docker-driver:
    description: The Docker driver to use for building the image.
    default: "docker-container"
  base-image-aws-account-id:
    description: The AWS account ID where the base image is located.
    default: "861208160487"
  base-image-aws-region:
    description: The AWS region where the base image is located.
    default: eu-central-1
  falcon-client-id:
    description: The CrowdStrike Falcon client ID for image scanning.
    required: false
  falcon-client-secret:
    description: The CrowdStrike Falcon client secret for image scanning.
    required: false

runs:
  using: composite
  steps:
    - name: Check out code
      uses: actions/checkout@v5
      with:
        ref: ${{ inputs.sha }}
        fetch-depth: 0
        submodules: "true"

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: ${{ inputs.docker-driver }}

    - name: Login to ECR for base image
      uses: CardoAI/composite/ecrlogin_with_role@main
      if: ${{ (inputs.base-image-aws-region != '') && (inputs.base-image-aws-account-id != '') }}
      with:
        aws-region: ${{ inputs.base-image-aws-region }}
        aws-id: ${{ inputs.base-image-aws-account-id }}

    - name: Login to target ECR repositories
      id: multi-ecr-login
      shell: bash
      env:
        REPOSITORIES: ${{ inputs.repositories }}
      run: |
        set -e
        for repo in $(echo "${REPOSITORIES}" | jq -c '.[]'); do
          ACCOUNT_ID=$(echo "${repo}" | jq -r '.account_id')
          REGION=$(echo "${repo}" | jq -r '.region')
          REGISTRY="${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"
          docker login --username AWS -p $(aws ecr get-login-password --region "${REGION}") "${REGISTRY}"
        done

    - name: Build Docker image
      id: build-image
      shell: bash
      env:
        DOCKER_BUILDKIT: 1
        BUILDKIT_PROGRESS: plain
        REPOSITORIES: ${{ inputs.repositories }}

      run: |
        #! /bin/bash
        echo "Building image ${{ inputs.tag }}"

        # Get the first repository for caching
        FIRST_REPO=$(echo "${REPOSITORIES}" | jq -c '.[0]')
        NAME=$(echo "${FIRST_REPO}" | jq -r '.name')
        ACCOUNT_ID=$(echo "${FIRST_REPO}" | jq -r '.account_id')
        REGION=$(echo "${FIRST_REPO}" | jq -r '.region')
        REGISTRY="${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"

        # Cache reference
        CACHE_REF="${REGISTRY}/${NAME}:cache-${{ inputs.tag }}"

        # Cache args if not using Docker driver
        CACHE_ARGS=""
        if [[ "${{ inputs.docker-driver }}" != "docker" ]]; then
          CACHE_ARGS="--cache-from=type=registry,ref=${CACHE_REF} \
          --cache-to=type=registry,ref=${CACHE_REF},mode=max"
        fi

        docker buildx build \
          --platform ${{ inputs.platform }} \
          --tag ${{ inputs.tag }} \
          ${CACHE_ARGS} \
          --load \
          --file ${{ inputs.folder }}/Dockerfile \
          ${{ inputs.extra-args }} ${{ inputs.context }}
        echo "Image ${{ inputs.tag }} for platform ${{ inputs.platform }} built!"

    - name: Debug Inputs
      shell: bash
      run: |
        echo "Falcon Client ID: ${{ inputs.falcon-client-id }}"
        echo "Falcon Client Secret: ${{ inputs.falcon-client-secret }}"

    - name: Scan Image
      if: ${{ inputs.scan == true || inputs.scan == 'true' }}
      uses: CardoAI/composite/scan_image_v3@main
      id: scan-image
      with:
        image: ${{ inputs.tag }}
        falcon-client-id: ${{ inputs.falcon-client-id }}
        falcon-client-secret: ${{ inputs.falcon-client-secret }}

    - name: Push Docker image
      id: push-image
      shell: bash
      env:
        REPOSITORIES: ${{ inputs.repositories }}
      run: |
        set -e
        for repo in $(echo "${REPOSITORIES}" | jq -c '.[]'); do
          NAME=$(echo "${repo}" | jq -r '.name')
          ACCOUNT_ID=$(echo "${repo}" | jq -r '.account_id')
          REGION=$(echo "${repo}" | jq -r '.region')
          REGISTRY="${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"

          IMAGE_TAG="${REGISTRY}/${NAME}:${{ inputs.tag }}"
          docker image tag "${{ inputs.tag }}" "${IMAGE_TAG}"
          echo "Pushing image ${IMAGE_TAG}..."
          docker push "${IMAGE_TAG}"
          echo "Image ${IMAGE_TAG} for platform ${{ inputs.platform }} pushed to ECR!"
        done
