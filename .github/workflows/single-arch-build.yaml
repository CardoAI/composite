name: Build Single Arch Image

on:
  workflow_call:
    inputs:
      sha:
        description: The commit SHA that triggered the workflow.
        type: string
        required: true
      runner-id:
        description: The GitHub runner id where the workflow will run.
        type: string
        required: true
      image:
        description: The image:tag to build.
        type: string
        required: true
      directory:
        description: The directory containing the Dockerfile.
        type: string
        default: '.'
      context:
        description: The context for the Dockerfile.
        type: string
        default: '.'
      tag:
        description: The tag to use for the image.
        type: string
        required: true
      registry:
        description: The Docker registry to push the image to.
        type: string
        required: true
      scan:
        description: Whether to scan the image for vulnerabilities.
        type: boolean
        default: false
      architecture:
        description: The architecture to build the image for.
        type: string
        required: true
      os:
        description: The OS to build the image for.
        type: string
        required: true
        default: linux
      build-args:
        description: The build arguments to pass to the Docker build command.
        type: string
        default: ''
      docker-driver:
        description: The Docker driver to use for building the image.
        type: string
        default: 'docker-container'
      aws-region:
        description: The AWS region where the ECR repository is located.
        type: string
        required: true
      aws-id:
        description: The AWS account ID where the ECR repository is located.
        type: string
        required: true
      base-image-aws-region:
        description: The AWS region where the base image is located.
        type: string
        default: eu-central-1
      base-image-aws-id:
        description: The AWS account ID where the base image is located.
        type: string
        default: "861208160487"
    # secrets:
    #   gh_pat:
    #     description: The GitHub Personal Access Token to access the repository.
    #     required: true
      
jobs:
  build_image:
    name: ${{ inputs.os}}/${{ inputs.architecture }}
    runs-on: ${{ inputs.runner-id }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
        #   token: ${{ secrets.gh_pat }}
          ref: ${{ inputs.sha }}
          fetch-depth: 0
          submodules: 'true'

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: ${{ inputs.docker-driver }}

      - name: ECR login for base image
        if: ${{ inputs.base-image-aws-region }} != '' && ${{ inputs.base-image-aws-id }} != ''
        uses: CardoAI/composite/ecrlogin_with_role@main
        with:
          aws-region: ${{ inputs.base-image-aws-region }}
          aws-id: ${{ inputs.base-image-aws-id }}
        
      - name: ECR login
        uses: CardoAI/composite/ecrlogin_with_role@main
        with:
          aws-region: ${{ inputs.aws-region }}
          aws-id: ${{ inputs.aws-id }}
      - name: Build Docker image
        id: build-image
        shell: bash
        run: |
          #! /bin/bash
          FULL_IMAGE="${{ inputs.registry }}/${{ inputs.image }}:${{ inputs.tag }}-${{ inputs.architecture }}"
          echo "Building image ${FULL_IMAGE}"

          docker buildx build --platform ${{ inputs.os }}/${{ inputs.architecture }} --tag ${FULL_IMAGE} --load ${{ inputs.build-args }} -f ${{ inputs.directory }}/Dockerfile ${{ inputs.context }}
          echo "Image ${FULL_IMAGE} for platform ${{ inputs.architecture }} built!"
          echo "FULL_IMAGE=${FULL_IMAGE}" >> $GITHUB_ENV

      - name: Scan Image
        if: ${{ inputs.scan }}
        uses: CardoAI/composite/scan_image@main
        id: scan-image
        with:
          image-tag: ${{ env.FULL_IMAGE }}
          critical-threshold: 0
          high-threshold: 0
          medium-threshold: 0
          low-threshold: 0
          other-threshold: 0
          
      - name: Push Docker image
        id: push-image
        shell: bash
        run: |
          #! /bin/bash
          docker push ${FULL_IMAGE}
          echo "Image ${FULL_IMAGE} for platform ${{ inputs.architecture}} pushed to ECR!"
